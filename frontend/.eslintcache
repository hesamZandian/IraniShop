[{"D:\\work\\university-project\\frontend\\src\\index.js":"1","D:\\work\\university-project\\frontend\\src\\App.js":"2","D:\\work\\university-project\\frontend\\src\\store.js":"3","D:\\work\\university-project\\frontend\\src\\reportWebVitals.js":"4","D:\\work\\university-project\\frontend\\src\\components\\Footer.js":"5","D:\\work\\university-project\\frontend\\src\\components\\Header.js":"6","D:\\work\\university-project\\frontend\\src\\reducers\\cartReducers.js":"7","D:\\work\\university-project\\frontend\\src\\reducers\\userReducers.js":"8","D:\\work\\university-project\\frontend\\src\\reducers\\orderReducers.js":"9","D:\\work\\university-project\\frontend\\src\\reducers\\productReducers.js":"10","D:\\work\\university-project\\frontend\\src\\components\\Message.js":"11","D:\\work\\university-project\\frontend\\src\\components\\Loader.js":"12","D:\\work\\university-project\\frontend\\src\\components\\Rating.js":"13","D:\\work\\university-project\\frontend\\src\\constants\\productConstants.js":"14","D:\\work\\university-project\\frontend\\src\\actions\\productActions.js":"15","D:\\work\\university-project\\frontend\\src\\components\\CheckoutSteps.js":"16","D:\\work\\university-project\\frontend\\src\\components\\FormContainer.js":"17","D:\\work\\university-project\\frontend\\src\\actions\\cartActions.js":"18","D:\\work\\university-project\\frontend\\src\\constants\\orderConstants.js":"19","D:\\work\\university-project\\frontend\\src\\constants\\userConstants.js":"20","D:\\work\\university-project\\frontend\\src\\constants\\cartConstants.js":"21","D:\\work\\university-project\\frontend\\src\\actions\\orderActions.js":"22","D:\\work\\university-project\\frontend\\src\\components\\Paginate.js":"23","D:\\work\\university-project\\frontend\\src\\actions\\userActions.js":"24","D:\\work\\university-project\\frontend\\src\\components\\ProductCarousel.js":"25","D:\\work\\university-project\\frontend\\src\\components\\Product.js":"26","D:\\work\\university-project\\frontend\\src\\components\\SearchBox.js":"27","D:\\work\\university-project\\frontend\\src\\actions\\brandActions.js":"28","D:\\work\\university-project\\frontend\\src\\reducers\\brandReducers.js":"29","D:\\work\\university-project\\frontend\\src\\pages\\home\\Home.js":"30","D:\\work\\university-project\\frontend\\src\\pages\\products\\Product.js":"31","D:\\work\\university-project\\frontend\\src\\pages\\products\\ProductList.js":"32","D:\\work\\university-project\\frontend\\src\\pages\\products\\ProductEdit.js":"33","D:\\work\\university-project\\frontend\\src\\pages\\cart\\Cart.js":"34","D:\\work\\university-project\\frontend\\src\\pages\\login\\Login.js":"35","D:\\work\\university-project\\frontend\\src\\pages\\register\\Register.js":"36","D:\\work\\university-project\\frontend\\src\\pages\\profile\\Profile.js":"37","D:\\work\\university-project\\frontend\\src\\pages\\shipping\\Shipping.js":"38","D:\\work\\university-project\\frontend\\src\\pages\\payment\\Payment.js":"39","D:\\work\\university-project\\frontend\\src\\pages\\orders\\PlaceOrder.js":"40","D:\\work\\university-project\\frontend\\src\\pages\\orders\\Order.js":"41","D:\\work\\university-project\\frontend\\src\\pages\\orders\\OrderList.js":"42","D:\\work\\university-project\\frontend\\src\\pages\\users\\UserEdit.js":"43","D:\\work\\university-project\\frontend\\src\\pages\\products\\category\\ProductCategoryList.js":"44","D:\\work\\university-project\\frontend\\src\\pages\\products\\category\\ProductCategoryEdit.js":"45","D:\\work\\university-project\\frontend\\src\\pages\\brands\\BrandsList.js":"46","D:\\work\\university-project\\frontend\\src\\pages\\brands\\BrandEdit.js":"47","D:\\work\\university-project\\frontend\\src\\pages\\users\\UsersList.js":"48","D:\\work\\university-project\\frontend\\src\\constants\\brandConstants.js":"49","D:\\work\\university-project\\frontend\\src\\actions\\index.js":"50"},{"size":685,"mtime":1639640199000,"results":"51","hashOfConfig":"52"},{"size":2528,"mtime":1645783741084,"results":"53","hashOfConfig":"52"},{"size":2032,"mtime":1640377697809,"results":"54","hashOfConfig":"52"},{"size":362,"mtime":1616789579000,"results":"55","hashOfConfig":"52"},{"size":359,"mtime":1616789579000,"results":"56","hashOfConfig":"57"},{"size":4048,"mtime":1645793697427,"results":"58","hashOfConfig":"52"},{"size":1418,"mtime":1640291380337,"results":"59","hashOfConfig":"52"},{"size":6019,"mtime":1640358521932,"results":"60","hashOfConfig":"52"},{"size":8981,"mtime":1640359168342,"results":"61","hashOfConfig":"52"},{"size":11286,"mtime":1640943333437,"results":"62","hashOfConfig":"52"},{"size":228,"mtime":1616789579000,"results":"63","hashOfConfig":"52"},{"size":458,"mtime":1616789579000,"results":"64","hashOfConfig":"52"},{"size":1915,"mtime":1639930013913,"results":"65","hashOfConfig":"52"},{"size":2822,"mtime":1640352039738,"results":"66","hashOfConfig":"52"},{"size":13735,"mtime":1645726376630,"results":"67","hashOfConfig":"52"},{"size":1643,"mtime":1639863280204,"results":"68","hashOfConfig":"52"},{"size":378,"mtime":1616789579000,"results":"69","hashOfConfig":"52"},{"size":1623,"mtime":1645702002557,"results":"70","hashOfConfig":"52"},{"size":1240,"mtime":1616789579000,"results":"71","hashOfConfig":"52"},{"size":1479,"mtime":1616789579000,"results":"72","hashOfConfig":"52"},{"size":287,"mtime":1616789579000,"results":"73","hashOfConfig":"52"},{"size":7449,"mtime":1645714205062,"results":"74","hashOfConfig":"52"},{"size":937,"mtime":1639929118219,"results":"75","hashOfConfig":"52"},{"size":8889,"mtime":1645713100330,"results":"76","hashOfConfig":"52"},{"size":1682,"mtime":1645784423797,"results":"77","hashOfConfig":"52"},{"size":1229,"mtime":1640203294980,"results":"78","hashOfConfig":"52"},{"size":1042,"mtime":1641063520771,"results":"79","hashOfConfig":"52"},{"size":5835,"mtime":1645726075037,"results":"80","hashOfConfig":"52"},{"size":3884,"mtime":1645723884162,"results":"81","hashOfConfig":"52"},{"size":3899,"mtime":1645724152800,"results":"82","hashOfConfig":"52"},{"size":12867,"mtime":1645726482949,"results":"83","hashOfConfig":"52"},{"size":5613,"mtime":1645783725530,"results":"84","hashOfConfig":"52"},{"size":9356,"mtime":1645784114579,"results":"85","hashOfConfig":"52"},{"size":5043,"mtime":1645784305578,"results":"86","hashOfConfig":"52"},{"size":2836,"mtime":1645724176477,"results":"87","hashOfConfig":"52"},{"size":4443,"mtime":1645725215346,"results":"88","hashOfConfig":"52"},{"size":7676,"mtime":1645724384712,"results":"89","hashOfConfig":"52"},{"size":3605,"mtime":1645724074712,"results":"90","hashOfConfig":"52"},{"size":1776,"mtime":1645724255386,"results":"91","hashOfConfig":"52"},{"size":6878,"mtime":1645725163805,"results":"92","hashOfConfig":"52"},{"size":11177,"mtime":1645726419824,"results":"93","hashOfConfig":"52"},{"size":3777,"mtime":1645724220342,"results":"94","hashOfConfig":"52"},{"size":4371,"mtime":1645724509934,"results":"95","hashOfConfig":"52"},{"size":5294,"mtime":1645780658276,"results":"96","hashOfConfig":"52"},{"size":3388,"mtime":1645780933785,"results":"97","hashOfConfig":"52"},{"size":5175,"mtime":1645724116627,"results":"98","hashOfConfig":"52"},{"size":4170,"mtime":1645724101345,"results":"99","hashOfConfig":"52"},{"size":3814,"mtime":1645780480797,"results":"100","hashOfConfig":"52"},{"size":988,"mtime":1645721486439,"results":"101","hashOfConfig":"52"},{"size":1225,"mtime":1645726080674,"results":"102","hashOfConfig":"52"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vzn18v",{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},"1sjqxw3",{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\work\\university-project\\frontend\\src\\index.js",[],"D:\\work\\university-project\\frontend\\src\\App.js",[],"D:\\work\\university-project\\frontend\\src\\store.js",[],"D:\\work\\university-project\\frontend\\src\\reportWebVitals.js",[],"D:\\work\\university-project\\frontend\\src\\components\\Footer.js",[],["218","219"],"D:\\work\\university-project\\frontend\\src\\components\\Header.js",[],"D:\\work\\university-project\\frontend\\src\\reducers\\cartReducers.js",[],"D:\\work\\university-project\\frontend\\src\\reducers\\userReducers.js",[],"D:\\work\\university-project\\frontend\\src\\reducers\\orderReducers.js",[],"D:\\work\\university-project\\frontend\\src\\reducers\\productReducers.js",[],"D:\\work\\university-project\\frontend\\src\\components\\Message.js",[],"D:\\work\\university-project\\frontend\\src\\components\\Loader.js",[],"D:\\work\\university-project\\frontend\\src\\components\\Rating.js",[],"D:\\work\\university-project\\frontend\\src\\constants\\productConstants.js",[],"D:\\work\\university-project\\frontend\\src\\actions\\productActions.js",[],"D:\\work\\university-project\\frontend\\src\\components\\CheckoutSteps.js",[],"D:\\work\\university-project\\frontend\\src\\components\\FormContainer.js",[],"D:\\work\\university-project\\frontend\\src\\actions\\cartActions.js",[],"D:\\work\\university-project\\frontend\\src\\constants\\orderConstants.js",[],"D:\\work\\university-project\\frontend\\src\\constants\\userConstants.js",[],"D:\\work\\university-project\\frontend\\src\\constants\\cartConstants.js",[],"D:\\work\\university-project\\frontend\\src\\actions\\orderActions.js",[],"D:\\work\\university-project\\frontend\\src\\components\\Paginate.js",[],"D:\\work\\university-project\\frontend\\src\\actions\\userActions.js",[],"D:\\work\\university-project\\frontend\\src\\components\\ProductCarousel.js",["220"],"import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { Carousel, Image } from 'react-bootstrap'\nimport Loader from './Loader'\nimport Message from './Message'\nimport * as actionCreators from '../actions'\n\nfunction ProductCarousel({ listTopProducts, productTopRated }) {\n\n    const { error, loading, products } = productTopRated\n\n    useEffect(() => {\n        listTopProducts()\n    }, [])\n\n    return (loading ? <Loader />\n        : error\n            ? <Message variant='danger'>{error}</Message>\n            : (\n                <Carousel pause='hover' className='bg-dark' style={{ direction: \"ltr\" }}>\n                    {products.map(product => (\n                        <Carousel.Item key={product._id}>\n                            <Link to={`/product/${product._id}`}>\n                                <Image src={product.image} alt={product.name} fluid style={{ borderRadius: 0 }} />\n                                <Carousel.Caption className='carousel.caption'>\n                                    <h4 style={{ direction: 'rtl' }}>{product.name} (${product.price})</h4>\n                                </Carousel.Caption>\n                            </Link>\n                        </Carousel.Item>\n                    ))}\n                </Carousel>\n            )\n\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        productTopRated: state.products.productTopRated\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        listTopProducts: () => dispatch(actionCreators.listTopProducts())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductCarousel)\n","D:\\work\\university-project\\frontend\\src\\components\\Product.js",[],"D:\\work\\university-project\\frontend\\src\\components\\SearchBox.js",[],"D:\\work\\university-project\\frontend\\src\\actions\\brandActions.js",[],"D:\\work\\university-project\\frontend\\src\\reducers\\brandReducers.js",[],"D:\\work\\university-project\\frontend\\src\\pages\\home\\Home.js",["221"],"import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { Row, Col, Form } from 'react-bootstrap'\nimport Product from '../../components/Product'\nimport Loader from '../../components/Loader'\nimport Message from '../../components/Message'\nimport Paginate from '../../components/Paginate'\nimport ProductCarousel from '../../components/ProductCarousel'\nimport * as actionCreators from '../../actions'\n\n\nfunction HomeScreen({ history, filterProducts, productList }) {\n    // const productList = useSelector(state => state.products.productList)\n    const { error, loading, products,categories, brands, page, pages } = productList\n    const [is_available, set_is_available] = useState(false);\n    const [selected_category, set_selected_category] = useState('');\n    const [selected_brand, set_selected_brand] = useState('');\n    \n    let keyword = history.location.search\n\n    useEffect(() => {\n        const params = { category: selected_category || '', is_available: is_available, brand: selected_brand }\n            filterProducts(params)\n    }, [selected_category, is_available, selected_brand])\n\n    return (\n        <div>\n            {!keyword && <ProductCarousel />}\n            <div className='homescreen-head'>\n            <h1 className='text-right Font-Yekan '>محصولات</h1>\n            <div className='homescreen-dropdowns'>\n                <Form.Group controlId='isavailable' style={{ direction: \"rtl\" }}>\n                    <Form.Check\n                    type='checkbox'\n                    label='فقط کالاهای موجود'\n                    checked={is_available}\n                    onChange={(e) => set_is_available(e.target.checked)}/>\n                </Form.Group>\n                <Form.Group controlId='category'>\n                  <Form.Control\n                    as='select'\n                    value={selected_category}\n                    onChange={(e) => set_selected_category(e.target.value)}>\n                    <option value='' className='Font-Yekan '>انتخاب دسته بندی</option>\n                    {categories.map((ckey) => {\n                        return <option value={ckey._id} className='Font-Yekan '>{ckey.name}</option>\n                    })}\n                  </Form.Control>\n                </Form.Group>\n                <Form.Group controlId='selected_brand'>\n                  <Form.Control\n                    as='select'\n                    value={selected_brand}\n                    onChange={(e) => set_selected_brand(e.target.value)}>\n                    <option value='' className='Font-Yekan '>انتخاب برند</option>\n                    {brands.map((ckey) => {\n                        return <option value={ckey._id} className='Font-Yekan '>{ckey.name}</option>\n                    })}\n                  </Form.Control>\n                </Form.Group>\n            </div>\n            </div>\n            {loading ? <Loader />\n                : error ? <Message variant='danger'>{error}</Message>\n                    :\n                    <div>\n                        <Row>\n                            {products.map(product => (\n                                <Col key={product._id} sm={12} md={6} lg={4} xl={3} style={{ minHeight: \"524px\" }}>\n                                    <Product product={product} />\n                                </Col>\n                            ))}\n                        </Row>\n                        <Paginate page={page} pages={pages} keyword={keyword} />\n                    </div>\n            }\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        productList: state.products.productList,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        filterProducts: (data) => dispatch(actionCreators.filterProducts(data))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeScreen)\n","D:\\work\\university-project\\frontend\\src\\pages\\products\\Product.js",["222"],"import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { Row, Col, Image, ListGroup, Button, Card, Form } from 'react-bootstrap'\nimport Rating from '../../components/Rating'\nimport Loader from '../../components/Loader'\nimport Message from '../../components/Message'\nimport * as actionCreators from '../../actions'\nimport momentJalaali from 'moment-jalaali'\n\nfunction Product({ match, history, listProductDetails, productDetails, userLogin, productReviewCreate, createProductReview, productCreateReviewReset }) {\n    const [qty, setQty] = useState(1)\n    const [rating, setRating] = useState(0)\n    const [comment, setComment] = useState('')\n\n\n    const { loading, error, product } = productDetails\n\n    const { userInfo } = userLogin\n\n    const {\n        loading: loadingProductReview,\n        error: errorProductReview,\n        success: successProductReview,\n    } = productReviewCreate\n\n    useEffect(() => {\n        if (successProductReview) {\n            setRating(0)\n            setComment('')\n            productCreateReviewReset()\n        }\n\n        listProductDetails(match.params.id)\n\n    }, [match, successProductReview])\n\n    const addToCartHandler = () => {\n        history.push(`/cart/${match.params.id}?qty=${qty}`)\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        createProductReview(match.params.id, { rating, comment })\n    }\n\n    return (\n        <div>\n            {loading ?\n                <Loader />\n                : error\n                    ? <Message variant='danger'>{error}</Message>\n                    : (\n                        <div>\n                            <Row>\n                                <Col md={6}>\n                                    <Image src={product.image} alt={product.name} fluid />\n                                </Col>\n\n\n                                <Col md={3}>\n                                    <ListGroup variant=\"flush\">\n                                        <ListGroup.Item  style={{ direction:\"rtl\", textAlign: \"right\" }}>\n                                            <h3>{product.name}</h3>\n                                        </ListGroup.Item>\n\n                                        <ListGroup.Item style={{ direction:\"rtl\", textAlign: \"right\" }}>\n                                            <Rating value={product.rating} text={`${product.numReviews}`} color={'#f8e825'} />\n                                        </ListGroup.Item>\n\n                                        <ListGroup.Item className='Font-Yekan ' style={{ direction:\"rtl\", textAlign: \"right\" }}>\n                                            قیمت: ${product.price}\n                                        </ListGroup.Item>\n\n                                        <ListGroup.Item className='Font-Yekan ' style={{ direction:\"rtl\", textAlign: \"right\" }}>\n                                            درباره محصول: {product.description}\n                                        </ListGroup.Item>\n                                    </ListGroup>\n                                </Col>\n\n\n                                <Col md={3}>\n                                    <Card>\n                                        <ListGroup variant='flush'>\n                                            <ListGroup.Item>\n                                                <Row>\n                                                    <Col className='Font-Yekan  text-right fw-bold'>قیمت:</Col>\n                                                    <Col className='Font-Yekan '>\n                                                        <strong>${product.price}</strong>\n                                                    </Col>\n                                                </Row>\n                                            </ListGroup.Item>\n                                            <ListGroup.Item>\n                                                <Row>\n                                                    <Col className='Font-Yekan  text-right fw-bold'>وضعیت:</Col>\n                                                    <Col className='Font-Yekan ' style={{ color: product.countInStock > 0 ? \"green\": \"red\" }}>\n                                                        {product.countInStock > 0 ? 'موجود در انبار' :\n                                                         'ناموجود'}\n                                                    </Col>\n                                                </Row>\n                                            </ListGroup.Item>\n\n                                            {product.countInStock > 0 && (\n                                                <ListGroup.Item>\n                                                    <Row>\n                                                        <Col className='Font-Yekan  fw-bold text-right' style={{ alignSelf: \"center\" }}>تعداد</Col>\n                                                        <Col xs='auto' className='my-1'>\n                                                            <Form.Control\n                                                                as=\"select\"\n                                                                value={qty}\n                                                                onChange={(e) => setQty(e.target.value)}\n                                                            >\n                                                                {\n\n                                                                    [...Array(product.countInStock).keys()].map((x) => (\n                                                                        <option key={x + 1} value={x + 1}>\n                                                                            {x + 1}\n                                                                        </option>\n                                                                    ))\n                                                                }\n\n                                                            </Form.Control>\n                                                        </Col>\n                                                    </Row>\n                                                </ListGroup.Item>\n                                            )}\n\n\n                                            <ListGroup.Item>\n                                                <Button\n                                                    onClick={addToCartHandler}\n                                                    className='btn-block Font-Yekan '\n                                                    disabled={product.countInStock === 0}\n                                                    type='button'>\n                                                    اضافه به سبد خرید\n                                                </Button>\n                                            </ListGroup.Item>\n                                        </ListGroup>\n                                    </Card>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col md={6}>\n                                    <h4 className='Font-Yekan '>نقد و بررسی</h4>\n                                    {product.reviews.length === 0 && <Message variant='info'>نظری درباره این محصول داده نشده است</Message>}\n\n                                    <ListGroup variant='flush'>\n                                        {product.reviews.map((review) => (\n                                            <ListGroup.Item key={review._id}>\n                                                <strong>{review.name}</strong>\n                                                <Rating value={review.rating} color='#f8e825' />\n                                                <p>{momentJalaali(review.createdAt).format('jYYYY-jM-jD')} </p>\n                                                <p>{review.comment}</p>\n                                            </ListGroup.Item>\n                                        ))}\n\n                                        <ListGroup.Item>\n                                            <h4 className='Font-Yekan '>نظر خود را بنوسید</h4>\n\n                                            {loadingProductReview && <Loader />}\n                                            {successProductReview && <Message variant='success'>نظر شما با موفقیت ثبت شد</Message>}\n                                            {errorProductReview && <Message variant='danger'>{errorProductReview}</Message>}\n\n                                            {userInfo ? (\n                                                <Form onSubmit={submitHandler}>\n                                                    <Form.Group controlId='rating'>\n                                                        <Form.Label className='Font-Yekan '>امتیازات</Form.Label>\n                                                        <Form.Control\n                                                            as='select'\n                                                            value={rating}\n                                                            onChange={(e) => setRating(e.target.value)}\n                                                        >\n                                                            <option value='' className='Font-Yekan '>انتخاب</option>\n                                                            <option value='1' className='Font-Yekan '>1 - ضعیف</option>\n                                                            <option value='2' className='Font-Yekan '>2 - متوسط</option>\n                                                            <option value='3' className='Font-Yekan '>3 - خوب</option>\n                                                            <option value='4' className='Font-Yekan '>4 - خیلی خوب</option>\n                                                            <option value='5' className='Font-Yekan '>5 - عالی</option>\n                                                        </Form.Control>\n                                                    </Form.Group>\n\n                                                    <Form.Group controlId='comment'>\n                                                        <Form.Label className='Font-Yekan '>نقد و بررسی</Form.Label>\n                                                        <Form.Control\n                                                            as='textarea'\n                                                            row='5'\n                                                            value={comment}\n                                                            onChange={(e) => setComment(e.target.value)}\n                                                        ></Form.Control>\n                                                    </Form.Group>\n\n                                                    <Button\n                                                        disabled={loadingProductReview}\n                                                        type='submit'\n                                                        variant='primary'\n                                                        className='Font-Yekan '\n                                                    >\n                                                        ثبت\n                                                    </Button>\n\n                                                </Form>\n                                            ) : (\n                                                    <Message variant='info'>لطفا برای نظر دادن <Link to='/login'>وارد</Link> شوید</Message>\n                                                )}\n                                        </ListGroup.Item>\n                                    </ListGroup>\n                                </Col>\n                            </Row>\n                        </div>\n                    )\n\n            }\n\n\n        </div >\n    )\n}\n \nconst mapStateToProps = (state) => {\n    return {\n        productDetails: state.products.productDetails,\n        userLogin: state.user.userLogin,\n        productReviewCreate: state.products.productReviewCreate\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        listProductDetails: (id) => dispatch(actionCreators.listProductDetails(id)),\n        createProductReview: (id, review) => dispatch(actionCreators.createProductReview(id, review)),\n        productCreateReviewReset: () => dispatch(actionCreators.productCreateReviewReset())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Product)\n","D:\\work\\university-project\\frontend\\src\\pages\\products\\ProductList.js",["223"],"import React, { useEffect } from 'react'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button, Row, Col } from 'react-bootstrap'\nimport Loader from '../../components/Loader'\nimport Message from '../../components/Message'\nimport Paginate from '../../components/Paginate'\nimport * as actionCreators from '../../actions'\nimport { connect } from 'react-redux'\n\nfunction ProductList({ history, filterProducts, productCreateReset, deleteProduct, createProduct, productList, productDelete, productCreate, userLogin }) {\n\n    const { loading, error, products, categories, brands, pages, page } = productList\n\n    const { loading: loadingDelete, error: errorDelete, success: successDelete } = productDelete\n\n    const { loading: loadingCreate, error: errorCreate, success: successCreate, product: createdProduct } = productCreate\n\n    const { userInfo } = userLogin\n\n    useEffect(() => {\n        productCreateReset()\n\n\n        \n        if (!userInfo.isAdmin) {\n            history.push('/login')\n        }\n\n        if (successCreate) {\n            history.push(`/admin/product/${createdProduct._id}/edit`)\n        } else {\n            filterProducts({ brand: '', category: '', is_available: false })\n        }\n\n    }, [history, userInfo, successDelete, successCreate, createdProduct])\n\n\n    const deleteHandler = (id) => {\n\n        if (window.confirm('آیا از حذف این محصول اطمینان دارید?')) {\n            deleteProduct(id)\n        }\n    }\n\n    const createProductHandler = () => {\n        createProduct()\n    }\n    return (\n        <div>\n            <Row className='align-items-center'>\n                <Col>\n                    <h1 className='Font-Yekan '>محصولات</h1>\n                </Col>\n\n                <Col className='text-right'>\n                    <Button className='my-3' onClick={createProductHandler}>\n                        <i className='fas fa-plus'></i> محصول جدید\n                    </Button>\n                </Col>\n            </Row>\n\n            {loadingDelete && <Loader />}\n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\n\n\n            {loadingCreate && <Loader />}\n            {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\n\n            {loading\n                ? (<Loader />)\n                : error\n                    ? (<Message variant='danger'>{error}</Message>)\n                    : (\n                        <div>\n                            <Table striped bordered hover responsive className='table-sm'>\n                                <thead>\n                                    <tr>\n                                        <th className='text-right'>نام محصول</th>\n                                        <th className='text-right'>قیمت</th>\n                                        <th className='text-right'>دسته بندی</th>\n                                        <th className='text-right'>برند</th>\n                                        <th>عملیات</th>\n                                    </tr>\n                                </thead>\n\n                                <tbody>\n                                    {products.map(product => (\n                                        <tr key={product._id}>\n                                            <td className='text-right' style={{ direction: 'rtl' }}>{product.name}</td>\n                                            <td className='text-right'>${product.price}</td>\n                                            <td className='text-right'>{categories ? categories.find(l => l._id === product.category)?.name: ''}</td>\n                                            <td className='text-right'>{brands ? brands.find(b => b._id === product.brand)?.name: ''}</td>\n\n                                            <td>\n                                                <LinkContainer to={`/admin/product/${product._id}/edit`}>\n                                                    <Button variant='light' className='btn-sm'>\n                                                        <i className='fas fa-edit'></i>\n                                                    </Button>\n                                                </LinkContainer>\n\n                                                <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(product._id)}>\n                                                    <i className='fas fa-trash'></i>\n                                                </Button>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </Table>\n                            <Paginate pages={pages} page={page} isAdmin={true} />\n                        </div>\n                    )}\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        productList: state.products.productList,\n        productDelete: state.products.productDelete,\n        productCreate: state.products.productCreate,\n        userLogin: state.user.userLogin\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        filterProducts: (data) => dispatch(actionCreators.filterProducts(data)),\n        createProduct: (data) => dispatch(actionCreators.createProduct(data)),\n        deleteProduct: (id) => dispatch(actionCreators.deleteProduct(id)),\n        productCreateReset: () => dispatch(actionCreators.productCreateReset())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductList)","D:\\work\\university-project\\frontend\\src\\pages\\products\\ProductEdit.js",["224"],"import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { Form, Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport Loader from '../../components/Loader'\nimport Message from '../../components/Message'\nimport FormContainer from '../../components/FormContainer'\nimport * as actionCreators from '../../actions'\n\n\nfunction ProductEdit({ match, history, productUpdateReset, listProductDetails, updateProduct, productDetails, productUpdate }) {\n\n    const productId = match.params.id\n\n    const [name, setName] = useState('')\n    const [price, setPrice] = useState(0)\n    const [image, setImage] = useState('')\n    const [brand, setBrand] = useState('')\n    const [category, setCategory] = useState(null)\n    const [countInStock, setCountInStock] = useState(0)\n    const [description, setDescription] = useState('')\n    const [uploading, setUploading] = useState(false)\n\n    const { error, loading, product, categories, brands } = productDetails\n\n    const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = productUpdate\n    \n    useEffect(() => {\n\n        if (successUpdate) {\n            productUpdateReset()\n            history.push('/admin/productlist')\n        } else {\n            if (!product?.name || product._id !== Number(productId)) {\n                listProductDetails(productId)\n            } else {\n                setName(product.name)\n                setPrice(product.price)\n                setImage(product.image)\n                if (product.brand) {\n                    setBrand(product.brand)  \n                }else {\n                    setBrand(brands[0]._id)\n                }\n                if (product.category) {\n                    setCategory(product.category)\n                }else {\n                    setCategory(categories[0]._id)\n                }\n                setCountInStock(product.countInStock)\n                setDescription(product.description)\n\n            }\n        }\n\n\n\n    }, [product, productId, history, successUpdate])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        const data = {\n            _id: productId,\n            name,\n            price,\n            image,\n            brand,\n            category: parseInt(category),\n            countInStock,\n            description\n        }\n        updateProduct(data)\n    }\n\n    const uploadFileHandler = async (e) => {\n        const file = e.target.files[0]\n        const formData = new FormData()\n\n        formData.append('image', file)\n        formData.append('product_id', productId)\n\n        setUploading(true)\n\n        try {\n            const config = {\n                headers: {\n                    'Content-Type': 'multipart/form-data'\n                }\n            }\n\n            const { data } = await axios.post('/api/products/upload/', formData, config)\n\n\n            setImage(data)\n            setUploading(false)\n\n        } catch (error) {\n            setUploading(false)\n        }\n    }\n\n    return (\n        <div>\n            <FormContainer>\n                <h1>ویرایش محصول</h1>\n                {loadingUpdate && <Loader />}\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\n                    : (\n                        <Form onSubmit={submitHandler}>\n\n                            <Form.Group controlId='name'>\n                                <Form.Label className='w-100 text-right Font-Yekan '>نام محصول</Form.Label>\n                                <Form.Control\n\n                                    type='name'\n                                    placeholder='نام محصول'\n                                    value={name}\n                                    onChange={(e) => setName(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId='price'>\n                                <Form.Label className='w-100 text-right Font-Yekan '>قیمت</Form.Label>\n                                <Form.Control\n\n                                    type='number'\n                                    placeholder='قیمت'\n                                    value={price}\n                                    onChange={(e) => setPrice(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n\n                            <Form.Group controlId='image'>\n                                <Form.Label className='w-100 text-right Font-Yekan '>عکس</Form.Label>\n                                <Form.Control\n\n                                    type='text'\n                                    placeholder='عکس'\n                                    value={image}\n                                    onChange={(e) => setImage(e.target.value)}\n                                >\n                                </Form.Control>\n\n                                <Form.File\n                                    id='image-file'\n                                    label='انتخاب فایل'\n                                    custom\n                                    onChange={uploadFileHandler}\n                                >\n\n                                </Form.File>\n                                {uploading && <Loader />}\n\n                            </Form.Group>\n\n\n                            <Form.Group controlId='brand'>\n                                <Form.Label className='w-100 text-right Font-Yekan '>برند</Form.Label>\n                                <Form.Control\n                                as='select'\n                                value={brand}\n                                onChange={(e) => setBrand(e.target.value)}>\n                                <option value='' className='Font-Yekan '>انتخاب برند</option>\n                                {brands && brands.map((item => {\n                                    return (\n                                    <option value={item._id} className='Font-Yekan '>{item.name}</option>\n                                    )\n                                }))}\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId='countinstock'>\n                                <Form.Label className='w-100 text-right Font-Yekan '>تعداد در انبار</Form.Label>\n                                <Form.Control\n\n                                    type='number'\n                                    placeholder='تعداد در انبار'\n                                    value={countInStock}\n                                    onChange={(e) => setCountInStock(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId='category'>\n                                <Form.Label className='w-100 text-right Font-Yekan '>دسته بندی</Form.Label>\n                                <Form.Control\n                                as='select'\n                                value={category}\n                                onChange={(e) => setCategory(e.target.value)}>\n                                <option value='' className='Font-Yekan '>انتخاب دسته بندی</option>\n                                {categories && categories.map((item => {\n                                    return (\n                                    <option value={item._id} className='Font-Yekan '>{item.name}</option>\n                                    )\n                                }))}\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group controlId='description'>\n                                <Form.Label className='w-100 text-right Font-Yekan '>توضیحات</Form.Label>\n                                <Form.Control\n\n                                    type='text'\n                                    placeholder='Enter description'\n                                    value={description}\n                                    onChange={(e) => setDescription(e.target.value)}\n                                >\n                                </Form.Control>\n                            </Form.Group>\n\n\n                            <Button type='submit' variant='primary'>\n                                ویرایش\n                        </Button>\n\n                        </Form>\n                    )}\n\n            </FormContainer >\n        </div>\n\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        productDetails: state.products.productDetails,\n        productUpdate: state.products.productUpdate\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        listProductDetails: (id) => dispatch(actionCreators.listProductDetails(id)),\n        productUpdateReset: () => dispatch(actionCreators.productUpdateReset()),\n        updateProduct: (data) => dispatch(actionCreators.updateProduct(data))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductEdit)","D:\\work\\university-project\\frontend\\src\\pages\\cart\\Cart.js",["225"],"import React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { Row, Col, ListGroup, Image, Form, Button, Card } from 'react-bootstrap'\nimport Message from '../../components/Message'\nimport * as actionCreators from '../../actions'\n\nfunction Cart({ match, location, history, cart, addToCart, removeFromCart }) {\n    const productId = match.params.id\n    const qty = location.search ? Number(location.search.split('=')[1]) : 1\n\n    const { cartItems } = cart\n\n    useEffect(() => {\n        if (productId) {\n            addToCart(productId, qty)\n        }\n    }, [productId, qty])\n\n\n    const removeFromCartHandler = (id) => {\n        removeFromCart(id)\n    }\n\n    const checkoutHandler = () => {\n        history.push('/login?redirect=shipping')\n    }\n\n    return (\n        <Row>\n            <Col md={8} className='text-right'>\n                <h1 className='text-right'>سبد خرید</h1>\n                {cartItems.length === 0 ? (\n                    <Message variant='info'>\n                        سبد شما خالی است <Link to='/'>بازگشت به صفحه اصلی</Link>\n                    </Message>\n                ) : (\n                        <ListGroup variant='flush'>\n                            {cartItems.map(item => (\n                                <ListGroup.Item key={item.product}>\n                                    <Row>\n                                        <Col md={2}>\n                                            <Image src={item.image} alt={item.name} fluid rounded />\n                                        </Col>\n                                        <Col md={3}>\n                                            <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                        </Col>\n\n                                        <Col md={2}>\n                                            ${item.price}\n                                        </Col>\n\n                                        <Col md={3}>\n                                            <Form.Control\n                                                as=\"select\"\n                                                value={item.qty}\n                                                onChange={(e) => addToCart(item.product, Number(e.target.value))}\n                                            >\n                                                {\n\n                                                    [...Array(item.countInStock).keys()].map((x) => (\n                                                        <option key={x + 1} value={x + 1}>\n                                                            {x + 1}\n                                                        </option>\n                                                    ))\n                                                }\n\n                                            </Form.Control>\n                                        </Col>\n\n                                        <Col md={1}>\n                                            <Button\n                                                type='button'\n                                                variant='light'\n                                                onClick={() => removeFromCartHandler(item.product)}\n                                            >\n                                                <i className='fas fa-trash'></i>\n                                            </Button>\n                                        </Col>\n                                    </Row>\n                                </ListGroup.Item>\n                            ))}\n                        </ListGroup>\n                    )}\n            </Col>\n\n            <Col md={4}>\n                <Card>\n                    <ListGroup variant='flush'>\n                        <ListGroup.Item>\n                            <h2>تعداد  ({cartItems.reduce((acc, item) => acc + item.qty, 0)}) محصول</h2>\n                            ${cartItems.reduce((acc, item) => acc + item.qty * item.price, 0).toFixed(2)}\n                        </ListGroup.Item>\n                    </ListGroup>\n\n                    <ListGroup.Item>\n                        <Button\n                            type='button'\n                            className='btn-block'\n                            disabled={cartItems.length === 0}\n                            onClick={checkoutHandler}\n                        >\n                            تایید نهایی و پرداخت\n                        </Button>\n                    </ListGroup.Item>\n\n\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        cart: state.cart\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addToCart: (id, qty) => dispatch(actionCreators.addToCart(id, qty)),\n        removeFromCart: (id) => dispatch(actionCreators.removeFromCart(id))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cart)","D:\\work\\university-project\\frontend\\src\\pages\\login\\Login.js",[],"D:\\work\\university-project\\frontend\\src\\pages\\register\\Register.js",[],"D:\\work\\university-project\\frontend\\src\\pages\\profile\\Profile.js",["226"],"import React, { useState, useEffect } from 'react'\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { connect } from 'react-redux'\nimport Loader from '../../components/Loader'\nimport Message from '../../components/Message'\nimport * as actionCreators from '../../actions'\nimport momentJalaali from 'moment-jalaali'\n\nfunction Profile({ history, userUpdateProfileReset,  getUserDetails, listMyOrders, updateUserProfile, userDetails, userLogin, userUpdateProfile, myOrderList }) {\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState('')\n\n\n    const { error, loading, user } = userDetails\n\n    const { userInfo } = userLogin\n\n    const { success } = userUpdateProfile\n\n    const { loading: loadingOrders, error: errorOrders, orders } = myOrderList\n\n\n    useEffect(() => {\n        if (!userInfo) {\n            history.push('/login')\n        } else {\n            if (!user || !user.name || success || userInfo._id !== user._id) {\n                userUpdateProfileReset()\n                getUserDetails('profile')\n                listMyOrders()\n            } else {\n                setName(user.name)\n                setEmail(user.email)\n            }\n        }\n    }, [history, userInfo, user, success])\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n\n        if (password !== confirmPassword) {\n            setMessage('رمز عبور با رمز عبور تکراری یکسان نیست')\n        } else {\n            const data = {\n                'id': user._id,\n                'name': name,\n                'email': email,\n                'password': password\n            }\n            updateUserProfile(data)\n            setMessage('')\n        }\n\n    }\n    return (\n        <Row>\n            <Col md={3}>\n                <h2 className='text-right Font-Yekan '>حساب کاربری</h2>\n\n                {message && <Message variant='danger'>{message}</Message>}\n                {error && <Message variant='danger'>{error}</Message>}\n                {loading && <Loader />}\n                <Form onSubmit={submitHandler}>\n\n                    <Form.Group controlId='name'>\n                        <Form.Label className='w-100 text-right Font-Yekan ' style={{ direction: \"rtl\" }}>نام و نام خانوادگی</Form.Label>\n                        <Form.Control\n                            required\n                            type='name'\n                            placeholder='نام و نام خانوادگی'\n                            value={name}\n                            onChange={(e) => setName(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='email'>\n                        <Form.Label className='w-100 text-right Font-Yekan ' style={{ direction: \"rtl\" }}>ایمیل</Form.Label>\n                        <Form.Control\n                            required\n                            type='email'\n                            placeholder='ایمیل'\n                            value={email}\n                            onChange={(e) => setEmail(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='password'>\n                        <Form.Label className='w-100 text-right Font-Yekan ' style={{ direction: \"rtl\" }}>رمز عبور</Form.Label>\n                        <Form.Control\n\n                            type='password'\n                            placeholder='Enter Password'\n                            value={password}\n                            onChange={(e) => setPassword(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Form.Group controlId='passwordConfirm'>\n                        <Form.Label className='w-100 text-right Font-Yekan ' style={{ direction: \"rtl\" }}>تکرار رمز عبور</Form.Label>\n                        <Form.Control\n\n                            type='password'\n                            placeholder='تکرار رمز عبور'\n                            value={confirmPassword}\n                            onChange={(e) => setConfirmPassword(e.target.value)}\n                        >\n                        </Form.Control>\n                    </Form.Group>\n\n                    <Button type='submit' variant='primary'>\n                        ویرایش\n                </Button>\n\n                </Form>\n            </Col>\n\n            <Col md={9}>\n                <h2 className='text-right Font-Yekan '>سفارشات من</h2>\n                {loadingOrders ? (\n                    <Loader />\n                ) : errorOrders ? (\n                    <Message variant='danger'>{errorOrders}</Message>\n                ) : (\n                            <Table striped responsive className='table-sm'>\n                                <thead>\n                                    <tr>\n                                        <th>شناسه</th>\n                                        <th>تاریخ</th>\n                                        <th>مبلغ کل</th>\n                                        <th>مبلغ پرداخت شده</th>\n                                        <th>ارسال شده</th>\n                                        <th></th>\n                                    </tr>\n                                </thead>\n\n                                <tbody>\n                                    {orders.map(order => (\n                                        <tr key={order._id}>\n                                            <td>{order._id}</td>\n                                            <td>{momentJalaali(order.createdAt).format('jYYYY-jM-jD')}</td>\n                                            <td>${order.totalPrice}</td>\n                                            <td>{order.isPaid ? momentJalaali(order.paidAt).format('jYYYY-jM-jD') : (\n                                                <i className='fas fa-times' style={{ color: 'red' }}></i>\n                                            )}</td>\n                                            <td>\n                                                <LinkContainer to={`/order/${order._id}`}>\n                                                    <Button className='btn-sm'>جزئیات</Button>\n                                                </LinkContainer>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </Table>\n                        )}\n            </Col>\n        </Row>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        userDetails: state.user.userDetails,\n        userLogin: state.user.userLogin,\n        userUpdateProfile: state.user.userUpdateProfile,\n        myOrderList: state.orders.myOrderList\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        userUpdateProfileReset: () => dispatch(actionCreators.userUpdateProfileReset()),\n        getUserDetails: (id) => dispatch(actionCreators.getUserDetails(id)),\n        listMyOrders: () => dispatch(actionCreators.listMyOrders()),\n        updateUserProfile: (user) => dispatch(actionCreators.updateUserProfile(user))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile)","D:\\work\\university-project\\frontend\\src\\pages\\shipping\\Shipping.js",[],"D:\\work\\university-project\\frontend\\src\\pages\\payment\\Payment.js",["227"],"import React, { useState } from 'react'\nimport { Form, Button, Col } from 'react-bootstrap'\nimport { connect, useDispatch } from 'react-redux'\nimport FormContainer from '../../components/FormContainer'\nimport CheckoutSteps from '../../components/CheckoutSteps'\nimport * as actionCreators from '../../actions'\n\nfunction Payment({ history, savePaymentMethod }) {\n\n\n    const [paymentMethod, setPaymentMethod] = useState('PayPal')\n\n    // if (!shippingAddress?.address) {\n    //     history.push('/shipping')\n    // }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        savePaymentMethod(paymentMethod)\n        history.push('/placeorder')\n    }\n\n    return (\n        <FormContainer>\n            <CheckoutSteps step1 step2 step3 />\n\n            <Form onSubmit={submitHandler}>\n                <Form.Group>\n                    <Form.Label as='legend'>انتخاب نحوه پرداخت</Form.Label>\n                    <Col>\n                        <Form.Check\n                            type='radio'\n                            label='PayPal or Credit Card'\n                            id='paypal'\n                            name='paymentMethod'\n                            checked\n                            onChange={(e) => setPaymentMethod(e.target.value)}\n                        >\n\n                        </Form.Check>\n                    </Col>\n                </Form.Group>\n\n                <Button type='submit' variant='primary'>\n                    ادامه\n                </Button>\n            </Form>\n        </FormContainer>\n    )\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        savePaymentMethod: (data) => dispatch(actionCreators.savePaymentMethod(data))\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(Payment)\n","D:\\work\\university-project\\frontend\\src\\pages\\orders\\PlaceOrder.js",[],"D:\\work\\university-project\\frontend\\src\\pages\\orders\\Order.js",[],"D:\\work\\university-project\\frontend\\src\\pages\\orders\\OrderList.js",["228"],"import React, { useEffect } from 'react'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport Loader from '../../components/Loader'\nimport Message from '../../components/Message'\nimport * as actionCreators from '../../actions'\nimport momentJalaali from 'moment-jalaali'\n\nfunction OrderList({ history, listOrders, orderList, userLogin }) {\n\n\n    const { loading, error, orders } = orderList\n\n    const { userInfo } = userLogin\n\n\n\n    useEffect(() => {\n        if (userInfo && userInfo.isAdmin) {\n            listOrders()\n        } else {\n            history.push('/login')\n        }\n\n    }, [history, userInfo])\n\n\n    return (\n        <div>\n            <h1 className='text-right Font-Yekan '>سفارشات</h1>\n            {loading\n                ? (<Loader />)\n                : error\n                    ? (<Message variant='danger'>{error}</Message>)\n                    : (\n                        <Table striped bordered hover responsive className='table-sm'>\n                            <thead>\n                                <tr>\n                                    <th>کاربر</th>\n                                    <th>تاریخ</th>\n                                    <th>مبلغ نهایی</th>\n                                    <th>پرداخت شده</th>\n                                    <th>تحویل داده شده</th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {orders.map(order => (\n                                    <tr key={order._id}>\n                                        <td>{order.user && order.user.name}</td>\n                                        <td>{momentJalaali(order.createdAt).format('jYYYY-jM-jD')}</td>\n                                        <td>${order.totalPrice}</td>\n\n                                        <td>{order.isPaid ? (\n                                            momentJalaali(order.paidAt).format('jYYYY-jM-jD')\n                                        ) : (\n                                                <i className='fas fa-times' style={{ color: 'red' }}></i>\n                                            )}\n                                        </td>\n\n                                        <td>{order.isDelivered ? (\n                                            momentJalaali(order.deliveredAt).format('jYYYY-jM-jD')\n                                        ) : (\n                                                <i className='fas fa-times' style={{ color: 'red' }}></i>\n                                            )}\n                                        </td>\n\n                                        <td>\n                                            <LinkContainer to={`/order/${order._id}`}>\n                                                <Button variant='light' className='btn-sm'>\n                                                    جزئیات\n                                                </Button>\n                                            </LinkContainer>\n\n\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n                    )}\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        userLogin: state.user.userLogin,\n        orderList: state.orders.orderList\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        listOrders: () => dispatch(actionCreators.listOrders())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrderList)","D:\\work\\university-project\\frontend\\src\\pages\\users\\UserEdit.js",[],"D:\\work\\university-project\\frontend\\src\\pages\\products\\category\\ProductCategoryList.js",["229"],"import React, {  useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button, Row, Col } from 'react-bootstrap'\r\nimport { connect } from 'react-redux'\r\nimport Loader from '../../../components/Loader'\r\nimport Message from '../../../components/Message'\r\nimport Paginate from '../../../components/Paginate'\r\nimport * as actionCreators from '../../../actions'\r\n\r\nfunction ProductCategoryList({ history, match, getProductCategoryList, deleteProductCategory, createProductCategory, productCategoryCreateReset, productCategoryList, productCategoryDelete, productCategoryCreate, userLogin }) {\r\n\r\n\r\n    const { loading, error, data, pages, page } = productCategoryList\r\n\r\n    const { loading: loadingDelete, error: errorDelete, success: successDelete } = productCategoryDelete\r\n\r\n    const { loading: loadingCreate, error: errorCreate, success: successCreate, category: createdCategory } = productCategoryCreate\r\n\r\n    const { userInfo } = userLogin\r\n\r\n    useEffect(() => {\r\n        productCategoryCreateReset()\r\n\r\n        if (!userInfo.isAdmin) {\r\n            history.push('/login')\r\n        }\r\n\r\n        if (successCreate) {\r\n            history.push(`/admin/category/${createdCategory._id}/edit`)\r\n        } else {\r\n            getProductCategoryList()\r\n        }\r\n\r\n    }, [history, userInfo, successDelete, successCreate, createdCategory])\r\n\r\n\r\n    const deleteHandler = (id) => {\r\n\r\n        if (window.confirm('آیا از حذف این دسته بندی اطمینان دارید?')) {\r\n            deleteProductCategory(id)\r\n        }\r\n    }\r\n\r\n    const createProductHandler = () => {\r\n       createProductCategory()\r\n    }\r\n    return (\r\n        <div>\r\n            <Row className='align-items-center'>\r\n                <Col>\r\n                    <h1 className='Font-Yekan '>دسته بندی محصولات</h1>\r\n                </Col>\r\n\r\n                <Col className='text-right'>\r\n                    <Button className='my-3' onClick={createProductHandler}>\r\n                        <i className='fas fa-plus'></i> دسته بندی جدید\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n\r\n            {loadingDelete && <Loader />}\r\n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\r\n\r\n\r\n            {loadingCreate && <Loader />}\r\n            {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\r\n\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    : (\r\n                        <div>\r\n                            <Table striped bordered hover responsive className='table-sm'>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th className='text-right'>نام</th>\r\n                                        <th>عملیات</th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    {data.map(product => (\r\n                                        <tr key={product._id}>\r\n                                            <td className='text-right' style={{ direction: 'rtl' }}>{product.name}</td>\r\n                                            <td>\r\n                                                <LinkContainer to={`/admin/category/${product._id}/edit`}>\r\n                                                    <Button variant='light' className='btn-sm'>\r\n                                                        <i className='fas fa-edit'></i>\r\n                                                    </Button>\r\n                                                </LinkContainer>\r\n\r\n                                                <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(product._id)}>\r\n                                                    <i className='fas fa-trash'></i>\r\n                                                </Button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                            <Paginate pages={pages} page={page} isAdmin={true} />\r\n                        </div>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        productCategoryList: state.products.productCategories,\r\n        productCategoryDelete: state.products.productCategoryDelete,\r\n        productCategoryCreate: state.products.productCategoryCreate,\r\n        userLogin: state.user.userLogin\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getProductCategoryList: () => dispatch(actionCreators.getProductCategoryList()),\r\n        deleteProductCategory: (id) => dispatch(actionCreators.deleteProductCategory(id)),\r\n        createProductCategory: (data) => dispatch(actionCreators.createProductCategory(data)),\r\n        productCategoryCreateReset: () => dispatch(actionCreators.productCategoryCreateReset())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductCategoryList)","D:\\work\\university-project\\frontend\\src\\pages\\products\\category\\ProductCategoryEdit.js",["230"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { connect } from 'react-redux'\r\nimport Loader from '../../../components/Loader'\r\nimport Message from '../../../components/Message'\r\nimport FormContainer from '../../../components/FormContainer'\r\nimport * as actionCreators from '../../../actions'\r\n\r\n\r\nfunction ProductCategoryEdit({ match, history, getProductCategoryDetails, updateProductCategory, productCategoryUpdateReset, productCategoryDetails, productCategoryUpdate }) {\r\n\r\n    const productCategoryId = match.params.id\r\n\r\n    const [name, setName] = useState('')\r\n\r\n\r\n    const { error, loading, category } = productCategoryDetails\r\n\r\n    const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = productCategoryUpdate\r\n\r\n    useEffect(() => {\r\n\r\n        if (successUpdate) {\r\n           productCategoryUpdateReset()\r\n            history.push('/admin/categorylist')\r\n        } else {\r\n            if (!category?.name || category._id !== Number(productCategoryId)) {\r\n                getProductCategoryDetails(productCategoryId)\r\n            } else {\r\n                setName(category.name)\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }, [category, productCategoryId, history, successUpdate])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        updateProductCategory({\r\n            _id: productCategoryId,\r\n            name\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <FormContainer>\r\n                <h1>ویرایش دسته بندی</h1>\r\n                {loadingUpdate && <Loader />}\r\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n\r\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\r\n                    : (\r\n                        <Form onSubmit={submitHandler}>\r\n\r\n                            <Form.Group controlId='name'>\r\n                                <Form.Label className='w-100 text-right Font-Yekan '>نام دسته</Form.Label>\r\n                                <Form.Control\r\n\r\n                                    type='name'\r\n                                    placeholder='Enter name'\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n                                >\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Button type='submit' variant='primary'>\r\n                                ویرایش\r\n                        </Button>\r\n\r\n                        </Form>\r\n                    )}\r\n\r\n            </FormContainer >\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        productCategoryDetails: state.products.productCategoryDetails,\r\n        productCategoryUpdate: state.products.productCategoryUpdate\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getProductCategoryDetails: (id) => dispatch(actionCreators.getProductCategoryDetails(id)),\r\n        updateProductCategory: (product) => dispatch(actionCreators.updateProductCategory(product)),\r\n        productCategoryUpdateReset: () => dispatch(actionCreators.productCategoryUpdateReset())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductCategoryEdit)","D:\\work\\university-project\\frontend\\src\\pages\\brands\\BrandsList.js",["231"],"import React, { useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button, Row, Col } from 'react-bootstrap'\r\nimport { connect } from 'react-redux'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport Paginate from '../../components/Paginate'\r\nimport * as actionCreators from '../../actions'\r\n\r\nfunction BrandList({ history, match, getBrandsList, deleteBrand, createBrand, createBrandReset, brandList, brandDelete, brandCreate, userLogin }) {\r\n\r\n\r\n    const { loading, error, data, categories, pages, page } = brandList\r\n\r\n    const { loading: loadingDelete, error: errorDelete, success: successDelete } = brandDelete\r\n\r\n    const { loading: loadingCreate, error: errorCreate, success: successCreate, brand: createdBrand } = brandCreate\r\n\r\n    const { userInfo } = userLogin\r\n\r\n    useEffect(() => {\r\n        createBrandReset()\r\n\r\n        if (!userInfo.isAdmin) {\r\n            history.push('/login')\r\n        }\r\n\r\n        if (successCreate) {\r\n            history.push(`/admin/brand/${createdBrand._id}/edit`)\r\n        } else {\r\n            getBrandsList()\r\n        }\r\n\r\n    }, [history, userInfo, successDelete, successCreate, createdBrand])\r\n\r\n\r\n    const deleteHandler = (id) => {\r\n\r\n        if (window.confirm('آیا از حذف این محصول اطمینان دارید?')) {\r\n            deleteBrand(id)\r\n        }\r\n    }\r\n\r\n    const createBrandHandler = () => {\r\n        createBrand()\r\n    }\r\n    return (\r\n        <div>\r\n            <Row className='align-items-center'>\r\n                <Col>\r\n                    <h1 className='Font-Yekan '>برندها</h1>\r\n                </Col>\r\n\r\n                <Col className='text-right'>\r\n                    <Button className='my-3' onClick={createBrandHandler}>\r\n                        <i className='fas fa-plus'></i> برند جدید\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n\r\n            {loadingDelete && <Loader />}\r\n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\r\n\r\n\r\n            {loadingCreate && <Loader />}\r\n            {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\r\n\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    : (\r\n                        <div>\r\n                            <Table striped bordered hover responsive className='table-sm'>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th className='text-right'>نام برند</th>\r\n                                        <th className='text-right'>دسته بندی</th>\r\n                                        <th>عملیات</th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    {data.map(brand => (\r\n                                        <tr key={brand._id}>\r\n                                            <td className='text-right' style={{ direction: 'rtl' }}>{brand.name}</td>\r\n                                            <td className='text-right'>{categories ? categories.find(l => l._id === brand.category)?.name: ''}</td>\r\n                                            <td>\r\n                                                <LinkContainer to={`/admin/brand/${brand._id}/edit`}>\r\n                                                    <Button variant='light' className='btn-sm'>\r\n                                                        <i className='fas fa-edit'></i>\r\n                                                    </Button>\r\n                                                </LinkContainer>\r\n\r\n                                                <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(brand._id)}>\r\n                                                    <i className='fas fa-trash'></i>\r\n                                                </Button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                            <Paginate pages={pages} page={page} isAdmin={true} />\r\n                        </div>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        brandList: state.brands.brandList,\r\n        brandDelete: state.brands.brandDelete,\r\n        brandCreate: state.brands.brandCreate,\r\n        userLogin: state.user.userLogin\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getBrandsList: () => dispatch(actionCreators.getBrandsList()),\r\n        deleteBrand: (id) => dispatch(actionCreators.deleteBrand(id)),\r\n        createBrand: (data) => dispatch(actionCreators.createBrand(data)),\r\n        createBrandReset: () => dispatch(actionCreators.createBrandReset())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BrandList)","D:\\work\\university-project\\frontend\\src\\pages\\brands\\BrandEdit.js",["232"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { connect } from 'react-redux'\r\nimport Loader from '../../components/Loader'\r\nimport Message from '../../components/Message'\r\nimport FormContainer from '../../components/FormContainer'\r\nimport * as actionCreators from '../../actions'\r\n\r\nfunction BrandEdit({ match, history, getBrandDetails, updateBrand, updateBrandReset, brandDetails, brandUpdate }) {\r\n\r\n    const brandId = match.params.id\r\n\r\n    const [name, setName] = useState('')\r\n    const [category, setCategory] = useState(null)\r\n\r\n\r\n    const { error, loading, brand, categories } = brandDetails\r\n\r\n    const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = brandUpdate\r\n    \r\n    useEffect(() => {\r\n\r\n        if (successUpdate) {\r\n            updateBrandReset()\r\n            history.push('/admin/brandList')\r\n        } else {\r\n            if (!brand?.name || brand._id !== Number(brandId)) {\r\n                getBrandDetails(brandId)\r\n            } else {\r\n                setName(brand.name)\r\n                setCategory(brand.category)\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }, [brand, brandId, history, successUpdate])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        const data = {\r\n            _id: brandId,\r\n            name,\r\n            category: parseInt(category),\r\n        }\r\n        updateBrand(data)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <FormContainer>\r\n                <h1>ویرایش محصول</h1>\r\n                {loadingUpdate && <Loader />}\r\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n\r\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\r\n                    : (\r\n                        <Form onSubmit={submitHandler}>\r\n\r\n                            <Form.Group controlId='name'>\r\n                                <Form.Label className='w-100 text-right Font-Yekan '>نام محصول</Form.Label>\r\n                                <Form.Control\r\n\r\n                                    type='name'\r\n                                    placeholder='Enter name'\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n                                >\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId='category'>\r\n                                <Form.Label className='w-100 text-right Font-Yekan '>دسته بندی</Form.Label>\r\n                                <Form.Control\r\n                                as='select'\r\n                                value={category}\r\n                                onChange={(e) => setCategory(e.target.value)}>\r\n                                <option value='' className='Font-Yekan '>انتخاب دسته بندی</option>\r\n                                {categories && categories.map((item => {\r\n                                    return (\r\n                                    <option value={item._id} className='Font-Yekan '>{item.name}</option>\r\n                                    )\r\n                                }))}\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Button type='submit' variant='primary'>\r\n                                ویرایش\r\n                        </Button>\r\n\r\n                        </Form>\r\n                    )}\r\n\r\n            </FormContainer >\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        brandDetails: state.brands.brandDetails,\r\n        brandUpdate: state.brands.brandUpdate\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getBrandDetails: (id) => dispatch(actionCreators.getBrandDetails(id)),\r\n        updateBrand: (brand) => dispatch(actionCreators.updateBrand(brand)),\r\n        updateBrandReset: () => dispatch(actionCreators.updateBrandReset())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BrandEdit)","D:\\work\\university-project\\frontend\\src\\pages\\users\\UsersList.js",["233"],"import React, { useEffect } from 'react'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button } from 'react-bootstrap'\nimport Loader from '../../components/Loader'\nimport Message from '../../components/Message'\nimport * as actionCreators from '../../actions'\nimport { connect } from 'react-redux'\n\nfunction UsersList({ history, listUsers, deleteUser, userList, userLogin, userDelete }) {\n\n\n    const { loading, error, users } = userList\n\n    const { userInfo } = userLogin\n\n    const { success: successDelete } = userDelete\n\n\n    useEffect(() => {\n        if (userInfo && userInfo.isAdmin) {\n            listUsers()\n        } else {\n            history.push('/login')\n        }\n\n    }, [history, successDelete, userInfo])\n\n\n    const deleteHandler = (id) => {\n\n        if (window.confirm('آیا از حذف کاربر مورد نظر مطمئن هستید?')) {\n            deleteUser(id)\n        }\n    }\n\n    return (\n        <div>\n            <h1 className='text-right Font-Yekan '>کاربران</h1>\n            {loading\n                ? (<Loader />)\n                : error\n                    ? (<Message variant='danger'>{error}</Message>)\n                    : (\n                        <Table striped bordered hover responsive className='table-sm'>\n                            <thead>\n                                <tr>\n                                    <th>شناسه</th>\n                                    <th>نام و نام خانوادگی</th>\n                                    <th>ایمیل</th>\n                                    <th>ادمین</th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n\n                            <tbody>\n                                {users.map(user => (\n                                    <tr key={user._id}>\n                                        <td>{user._id}</td>\n                                        <td>{user.name}</td>\n                                        <td>{user.email}</td>\n                                        <td>{user.isAdmin ? (\n                                            <i className='fas fa-check' style={{ color: 'green' }}></i>\n                                        ) : (\n                                                <i className='fas fa-times' style={{ color: 'red' }}></i>\n                                            )}</td>\n\n                                        <td>\n                                            <LinkContainer to={`/admin/user/${user._id}/edit`}>\n                                                <Button variant='light' className='btn-sm'>\n                                                    <i className='fas fa-edit'></i>\n                                                </Button>\n                                            </LinkContainer>\n\n                                            <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(user._id)}>\n                                                <i className='fas fa-trash'></i>\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </Table>\n                    )}\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        userList: state.user.userList,\n        userLogin: state.user.userLogin,\n        userDelete: state.user.userDelete\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        listUsers: () => dispatch(actionCreators.listUsers()),\n        deleteUser: (id) => dispatch(actionCreators.deleteUser(id))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersList)\n","D:\\work\\university-project\\frontend\\src\\constants\\brandConstants.js",[],"D:\\work\\university-project\\frontend\\src\\actions\\index.js",[],{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","replacedBy":"237"},{"ruleId":"238","severity":1,"message":"239","line":15,"column":8,"nodeType":"240","endLine":15,"endColumn":10,"suggestions":"241"},{"ruleId":"238","severity":1,"message":"242","line":24,"column":8,"nodeType":"240","endLine":24,"endColumn":57,"suggestions":"243"},{"ruleId":"238","severity":1,"message":"244","line":36,"column":8,"nodeType":"240","endLine":36,"endColumn":37,"suggestions":"245"},{"ruleId":"238","severity":1,"message":"246","line":35,"column":8,"nodeType":"240","endLine":35,"endColumn":73,"suggestions":"247"},{"ruleId":"238","severity":1,"message":"248","line":58,"column":8,"nodeType":"240","endLine":58,"endColumn":52,"suggestions":"249"},{"ruleId":"238","severity":1,"message":"250","line":18,"column":8,"nodeType":"240","endLine":18,"endColumn":24,"suggestions":"251"},{"ruleId":"238","severity":1,"message":"252","line":41,"column":8,"nodeType":"240","endLine":41,"endColumn":42,"suggestions":"253"},{"ruleId":"254","severity":1,"message":"255","line":3,"column":19,"nodeType":"256","messageId":"257","endLine":3,"endColumn":30},{"ruleId":"238","severity":1,"message":"258","line":26,"column":8,"nodeType":"240","endLine":26,"endColumn":27,"suggestions":"259"},{"ruleId":"238","severity":1,"message":"260","line":34,"column":8,"nodeType":"240","endLine":34,"endColumn":74,"suggestions":"261"},{"ruleId":"238","severity":1,"message":"262","line":36,"column":8,"nodeType":"240","endLine":36,"endColumn":61,"suggestions":"263"},{"ruleId":"238","severity":1,"message":"264","line":34,"column":8,"nodeType":"240","endLine":34,"endColumn":71,"suggestions":"265"},{"ruleId":"238","severity":1,"message":"266","line":37,"column":8,"nodeType":"240","endLine":37,"endColumn":48,"suggestions":"267"},{"ruleId":"238","severity":1,"message":"268","line":26,"column":8,"nodeType":"240","endLine":26,"endColumn":42,"suggestions":"269"},"no-native-reassign",["270"],"no-negated-in-lhs",["271"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'listTopProducts'. Either include it or remove the dependency array. If 'listTopProducts' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["272"],"React Hook useEffect has a missing dependency: 'filterProducts'. Either include it or remove the dependency array. If 'filterProducts' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["273"],"React Hook useEffect has missing dependencies: 'listProductDetails' and 'productCreateReviewReset'. Either include them or remove the dependency array. If 'listProductDetails' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["274"],"React Hook useEffect has missing dependencies: 'filterProducts' and 'productCreateReset'. Either include them or remove the dependency array. If 'productCreateReset' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["275"],"React Hook useEffect has missing dependencies: 'brands', 'categories', 'listProductDetails', and 'productUpdateReset'. Either include them or remove the dependency array. If 'productUpdateReset' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["276"],"React Hook useEffect has a missing dependency: 'addToCart'. Either include it or remove the dependency array. If 'addToCart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["277"],"React Hook useEffect has missing dependencies: 'getUserDetails', 'listMyOrders', and 'userUpdateProfileReset'. Either include them or remove the dependency array. If 'userUpdateProfileReset' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["278"],"no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'listOrders'. Either include it or remove the dependency array. If 'listOrders' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["279"],"React Hook useEffect has missing dependencies: 'getProductCategoryList' and 'productCategoryCreateReset'. Either include them or remove the dependency array. If 'productCategoryCreateReset' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["280"],"React Hook useEffect has missing dependencies: 'getProductCategoryDetails' and 'productCategoryUpdateReset'. Either include them or remove the dependency array. If 'productCategoryUpdateReset' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["281"],"React Hook useEffect has missing dependencies: 'createBrandReset' and 'getBrandsList'. Either include them or remove the dependency array. If 'createBrandReset' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["282"],"React Hook useEffect has missing dependencies: 'getBrandDetails' and 'updateBrandReset'. Either include them or remove the dependency array. If 'updateBrandReset' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["283"],"React Hook useEffect has a missing dependency: 'listUsers'. Either include it or remove the dependency array. If 'listUsers' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["284"],"no-global-assign","no-unsafe-negation",{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},{"desc":"295","fix":"296"},{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},"Update the dependencies array to be: [listTopProducts]",{"range":"311","text":"312"},"Update the dependencies array to be: [selected_category, is_available, selected_brand, filterProducts]",{"range":"313","text":"314"},"Update the dependencies array to be: [listProductDetails, match, productCreateReviewReset, successProductReview]",{"range":"315","text":"316"},"Update the dependencies array to be: [history, userInfo, successDelete, successCreate, createdProduct, productCreateReset, filterProducts]",{"range":"317","text":"318"},"Update the dependencies array to be: [product, productId, history, successUpdate, productUpdateReset, listProductDetails, brands, categories]",{"range":"319","text":"320"},"Update the dependencies array to be: [addToCart, productId, qty]",{"range":"321","text":"322"},"Update the dependencies array to be: [history, userInfo, user, success, userUpdateProfileReset, getUserDetails, listMyOrders]",{"range":"323","text":"324"},"Update the dependencies array to be: [history, listOrders, userInfo]",{"range":"325","text":"326"},"Update the dependencies array to be: [history, userInfo, successDelete, successCreate, createdCategory, productCategoryCreateReset, getProductCategoryList]",{"range":"327","text":"328"},"Update the dependencies array to be: [category, productCategoryId, history, successUpdate, productCategoryUpdateReset, getProductCategoryDetails]",{"range":"329","text":"330"},"Update the dependencies array to be: [history, userInfo, successDelete, successCreate, createdBrand, createBrandReset, getBrandsList]",{"range":"331","text":"332"},"Update the dependencies array to be: [brand, brandId, getBrandDetails, history, successUpdate, updateBrandReset]",{"range":"333","text":"334"},"Update the dependencies array to be: [history, listUsers, successDelete, userInfo]",{"range":"335","text":"336"},[456,458],"[listTopProducts]",[1082,1131],"[selected_category, is_available, selected_brand, filterProducts]",[1182,1211],"[listProductDetails, match, productCreateReviewReset, successProductReview]",[1235,1300],"[history, userInfo, successDelete, successCreate, createdProduct, productCreateReset, filterProducts]",[1994,2038],"[product, productId, history, successUpdate, productUpdateReset, listProductDetails, brands, categories]",[624,640],"[addToCart, productId, qty]",[1426,1460],"[history, userInfo, user, success, userUpdateProfileReset, getUserDetails, listMyOrders]",[685,704],"[history, listOrders, userInfo]",[1315,1381],"[history, userInfo, successDelete, successCreate, createdCategory, productCategoryCreateReset, getProductCategoryList]",[1215,1268],"[category, productCategoryId, history, successUpdate, productCategoryUpdateReset, getProductCategoryDetails]",[1174,1237],"[history, userInfo, successDelete, successCreate, createdBrand, createBrandReset, getBrandsList]",[1170,1210],"[brand, brandId, getBrandDetails, history, successUpdate, updateBrandReset]",[711,745],"[history, listUsers, successDelete, userInfo]"]